#+TITLE: Lispy

* Lisp code in org-mode
** Simpliest lisp code I can think of:

#+begin_src elisp :exports both
()
#+end_src

#+RESULTS:

**  Bit more complicated

#+begin_src emacs-lisp :exports both
(+ 1 2)
#+end_src

#+RESULTS:
: 3

*  Some scheme code evaluated

#+begin_src scheme :exports both
(car '("a" "b" "c"))
#+end_src

#+RESULTS:
: a

#+begin_src scheme :exports both
(and #t #f)
#+end_src

#+RESULTS:
: #f

*  The Little Schemer
** 0. Getting ready
#+name: common
#+begin_src scheme
(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))))
#+end_src

#+RESULTS: common
: #<unspecified>

** 1. Toys
*** Let's first see the primitive things working. Is "atom" really an atom?

#+begin_src scheme :noweb yes :exports both
<<common>>
(atom? "atom")
#+end_src

#+RESULTS:
: #t
*** And is '("atom") really not an atom?

#+begin_src scheme :noweb yes :exports both
<<common>>
(atom? '("atom"))
#+end_src

#+RESULTS:
: #f
